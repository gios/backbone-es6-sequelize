// Keep track of source paths that have been parsed by jshint
var sources = {};

// Meteor specific globals
// TODO: In future this could be generated from exportSymbols / @export?
var globals = {
  "Meteor": false,
  "Accounts": false,
  "Session": false,
  "Template": false,
  "check": false,
  "Match": false,
  "Deps": false,
  "EJSON": false,
  "Email": false,
  "Package": false,
  "Npm": false,
  "Assets": false,
  "process": false,
  "Tinytest": false
};

var options = {
    // JSHint Default Configuration File (as on JSHint website)
    // Modified for describing Meteor.js convention
    // See http://jshint.com/docs/ for more details

    "maxerr"        : 50,       // {int} Maximum error before stopping

    // Enforcing
    "bitwise"       : true,     // true: Prohibit bitwise operators (&, |, ^, etc.)
    "camelcase"     : true,     // true: Identifiers must be in camelCase
    "curly"         : true,     // true: Require {} for every new block or scope
    "eqeqeq"        : true,     // true: Require triple equals (===) for comparison
    "forin"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()
    "immed"         : false,    // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
    "indent"        : 2,        // {int} Number of spaces to use for indentation
    "latedef"       : false,    // true: Require variables/functions to be defined before being used
    "newcap"        : false,    // true: Require capitalization of all constructor functions e.g. `new F()`
    "noarg"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`
    "noempty"       : true,     // true: Prohibit use of empty blocks
    "nonew"         : false,    // true: Prohibit use of constructors for side-effects (without assignment)
    "plusplus"      : false,    // true: Prohibit use of `++` & `--`
    "quotmark"      : false,    // Quotation mark consistency:
                                //   false    : do nothing (default)
                                //   true     : ensure whatever is used is consistent
                                //   "single" : require single quotes
                                //   "double" : require double quotes
    "undef"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)
    "unused"        : true,     // true: Require all defined variables be used
    "strict"        : true,     // true: Requires all functions run in ES5 Strict Mode
    "trailing"      : true,    // true: Prohibit trailing whitespaces
    "maxparams"     : false,    // {int} Max number of formal params allowed per function
    "maxdepth"      : false,    // {int} Max depth of nested blocks (within functions)
    "maxstatements" : false,    // {int} Max number statements per function
    "maxcomplexity" : false,    // {int} Max cyclomatic complexity per function
    "maxlen"        : 80,       // {int} Max number of characters per line

    // Relaxing
    "asi"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)
    "boss"          : false,     // true: Tolerate assignments where comparisons would be expected
    "debug"         : false,     // true: Allow debugger statements e.g. browser breakpoints.
    "eqnull"        : false,     // true: Tolerate use of `== null`
    "es5"           : false,     // true: Allow ES5 syntax (ex: getters and setters)
    "esnext"        : false,     // true: Allow ES.next (ES6) syntax (ex: `const`)
    "moz"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)
                                 // (ex: `for each`, multiple try/catch, function expressionâ€¦)
    "evil"          : false,     // true: Tolerate use of `eval` and `new Function()`
    "expr"          : false,     // true: Tolerate `ExpressionStatement` as Programs
    "funcscope"     : false,     // true: Tolerate defining variables inside control statements"
    "globalstrict"  : true,      // true: Allow global "use strict" (also enables 'strict')
    "iterator"      : false,     // true: Tolerate using the `__iterator__` property
    "lastsemic"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block
    "laxbreak"      : false,     // true: Tolerate possibly unsafe line breakings
    "laxcomma"      : false,     // true: Tolerate comma-first style coding
    "loopfunc"      : false,     // true: Tolerate functions being defined in loops
    "multistr"      : false,     // true: Tolerate multi-line strings
    "proto"         : false,     // true: Tolerate using the `__proto__` property
    "scripturl"     : false,     // true: Tolerate script-targeted URLs
    "smarttabs"     : false,     // true: Tolerate mixed tabs/spaces when used for alignment
    "shadow"        : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
    "sub"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation
    "supernew"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`
    "validthis"     : false,     // true: Tolerate using this in a non-constructor function

    // Environments
    "browser"       : true,     // Web Browser (window, document, etc)
    "couch"         : false,    // CouchDB
    "devel"         : true,     // Development/debugging (alert, confirm, etc)
    "dojo"          : false,    // Dojo Toolkit
    "jquery"        : false,    // jQuery
    "mootools"      : false,    // MooTools
    "node"          : false,    // Node.js
    "nonstandard"   : false,    // Widely adopted globals (escape, unescape, etc)
    "prototypejs"   : false,    // Prototype and Scriptaculous
    "rhino"         : false,    // Rhino
    "worker"        : false,    // Web Workers
    "wsh"           : false,    // Windows Scripting Host
    "yui"           : false,    // Yahoo User Interface

    // Legacy
    "nomen"         : false,    // true: Prohibit dangling `_` in variables
    "onevar"        : false,    // true: Allow only one `var` statement per function
    "passfail"      : false,    // true: Stop on first error
    "white"         : false,    // true: Check against strict whitespace and indentation rules

    // Custom Globals
    "predef"        : [ ]       // additional predefined global variables
};


// Define our source handler for javascript files
var jshintHandler = function(compileStep) { //bundle, compileStep.inputPath, serverPath, where) {
  console.log('jshintHandler');
  // Make sure we dont parse same file twice, eg. client + server
  if (typeof sources[compileStep.inputPath] === 'undefined') {
    
    // Mark the file as parsed
    sources[compileStep.inputPath] = true;

    // Load source code
    var source = compileStep.read().toString('utf8');

    // Fire up jshint
    var JSHINT = Npm.require("jshint").JSHINT;

    // Test file
    var success = JSHINT(source, options, globals);

    if (success) {
      // Not much to report
      //console.log('File: ' + compileStep.inputPath + '  - OK');
    } else {
      // We got some errors/warnings from hint
      var result = JSHINT.data();

      // Print source path to terminal
      console.log('\u001b[31mJSHINT: \u001b[0m' + compileStep.inputPath + '');

      // Iterate over each error
      for (var i = 0; i < result.errors.length; i++) {
        
        // Get the error object
        var error = result.errors[i]; // id, raw, code, evidence, line, character, scope, a, b, c, s, reason
        
        // We highlight the point of evidence
        var highlightEvidence = error.evidence.substr(0, error.character - 1) + // Heading
                '\u001b[41m' + error.evidence.substr(error.character - 1, 1) +  // Mark the point
                '\u001b[0m' + error.evidence.substr(error.character);           // Trailing

        // Print info to terminal
        console.log(error.code + ' \u001b[32mline ' + error.line + ':' + error.character +
                '\u001b[0m \u001b[37m' + error.reason + '');
                
        // Print the highlighted evidence to terminal
        console.log('\u001b[0m-> ' + highlightEvidence + '\u001b[0m');

      }
    }

  }
};

// TODO: registerSourceHandler()
// At the moment this is not working, but might come one day
// https://github.com/meteor/meteor/pull/1207
Plugin.registerSourceHandler('js', jshintHandler);